{"version":3,"sources":["recipe.module.css","Receipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","receipe","image","Receipe","_ref","title","calories","ingredients","react_default","a","createElement","className","style","map","ingredient","text","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","receipt","setReceipt","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","console","log","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","src_Receipe","key","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,QAAA,wBAAAC,MAAA,oOCiBHC,EAfC,SAAAC,GAA4C,IAA1CC,EAA0CD,EAA1CC,MAAOC,EAAmCF,EAAnCE,SAAUJ,EAAyBE,EAAzBF,MAAOK,EAAkBH,EAAlBG,YACtC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,SAClBO,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UACKH,EAAYM,IAAK,SAAAC,GAAU,OACxBN,EAAAC,EAAAC,cAAA,UAAKI,EAAWC,SAGxBP,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMV,MAAOc,IAAKd,EAAOe,IAAI,OCqD1CC,SA5DH,WAEV,IAFgBC,EAKcC,mBAAS,IALvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKTK,EALSH,EAAA,GAKAI,EALAJ,EAAA,GAAAK,EAMYN,mBAAS,IANrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAMTE,EANSD,EAAA,GAMDE,EANCF,EAAA,GAAAG,EAOUV,mBAAS,WAPnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAOTE,EAPSD,EAAA,GAOFE,EAPEF,EAAA,GAShBG,oBAAU,WACRC,IACAC,QAAQC,IAAI,wCACX,CAACL,IAEJ,IAAMG,EAAU,eAAA/B,EAAAkB,OAAAgB,EAAA,EAAAhB,CAAAiB,EAAA9B,EAAA+B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA9B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,mCAAAC,OACSjB,EADT,YAAAiB,OAblB,WAakB,aAAAA,OAZjB,qCAWM,cACXP,EADWG,EAAAK,KAAAL,EAAAE,KAAA,EAGEL,EAASS,OAHX,OAGXR,EAHWE,EAAAK,KAIjBd,QAAQC,IAAIM,EAAKS,MACjB3B,EAAWkB,EAAKS,MALC,wBAAAP,EAAAQ,SAAAZ,MAAH,yBAAArC,EAAAkD,MAAAC,KAAAC,YAAA,GAiBhB,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAAA,QACE+C,SARW,SAAAC,GACfA,EAAEC,iBACF1B,EAASL,IAOLjB,UAAW,eACTH,EAAAC,EAAAC,cAAA,SACEC,UAAW,aACXiD,KAAO,OACPC,MAAOjC,EACPkC,SAlBW,SAAAJ,GACnB7B,EAAU6B,EAAEK,OAAOF,UAkBbrD,EAAAC,EAAAC,cAAA,UAASC,UAAW,gBAAgBiD,KAAM,UAA1C,WAIJpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZa,EAAQX,IAAI,SAAAZ,GAAO,OAClBO,EAAAC,EAAAC,cAACsD,EAAD,CACEC,IAAKhE,EAAQiE,OAAOC,MACpB9D,MAAOJ,EAAQiE,OAAOC,MACtB7D,SAAUL,EAAQiE,OAAO5D,SACzBJ,MAAOD,EAAQiE,OAAOhE,MACtBK,YAAaN,EAAQiE,OAAO3D,oBC9CpB6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.666dc5c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"receipe\":\"recipe_receipe__2cAVi\",\"image\":\"recipe_image__1fjFf\"};","import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Receipe = ({title, calories, image, ingredients }) => {\r\n    return (\r\n        <div className={style.receipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map( ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={image} alt=\"\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Receipe;","//import React, { Component } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport Receipe from './Receipe';\nimport './App.css';\n\n\nconst App = () => { \n\n  const APP_ID = `1018ea25`;\n  const APP_KEY = `07bd2f0134108e2a60ae9a2e13c3bf4f`;\n\n  const [receipt, setReceipt] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    getRecipes();\n    console.log('let say we are fetching data to you');\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    console.log(data.hits);\n    setReceipt(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getQuery = e => {\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  return (\n    <div className = \"App\">\n      <form \n        onSubmit={getQuery} \n        className =\"search-form\">\n          <input \n            className =\"search-bar\" \n            type = \"text\" \n            value={search} \n            onChange={updateSearch} />\n          <button  className =\"search-button\" type =\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipe\">\n        {receipt.map(receipe => (\n          <Receipe\n            key={receipe.recipe.label} \n            title={receipe.recipe.label}\n            calories={receipe.recipe.calories}\n            image={receipe.recipe.image}\n            ingredients={receipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n    ) \n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}